import tensorflow.keras as keras
from tensorflow.keras import layers
import tensorflow
(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()
#

print("Training data shape: ", X_train.shape)
print("Training labels shape: ", y_train.shape)
print("Test data shape: ", X_test.shape)
print("Test labels shape: ", y_test.shape)
import matplotlib.pyplot as plt

for i in range(1, 16):
    
    plt.subplot(3, 5, i)

    plt.imshow(X_train[i], cmap=plt.get_cmap('gray'))
 
# Display the entire plot
plt.show()
# Reshape the data to add a channel dimension for convolutional layers
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

X_train = X_train.astype("float32") / 255
X_test = X_test.astype("float32") / 255
model = tensorflow.keras.Sequential([
  layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
  layers.MaxPooling2D((2,2)),
  layers.Conv2D(64, (3,3), activation='relu'),
  layers.MaxPooling2D((2,2)),
  layers.Conv2D(64, (3,3), activation='relu'),
  layers.Flatten(),
  layers.Dense(64, activation='relu'),
  layers.Dense(10, activation='softmax')
])
# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))
model.summary()
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
import numpy as np
y_pred =model.predict(X_test)
Y_pred_classes = np.argmax(y_pred,axis = 1) 
Y_true = y_test
acc = accuracy_score(Y_true,Y_pred_classes)
class_report = classification_report(Y_true,Y_pred_classes)



print('The accuracy: {}'.format(acc))
print('The Classification Report:\n {}'.format(class_report))

import seaborn as sns
cm = confusion_matrix(Y_true, Y_pred_classes)
plt.figure(figsize = (12,9))
sns.heatmap(cm, annot=True,cmap="Greens",linewidths=.5)
